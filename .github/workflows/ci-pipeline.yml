name: Build, Format, and Analyze

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-format-analyze:
    runs-on: ubuntu-latest

    container:
      image: espressif/idf:v5.2.1

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Build the repo to make sure it builds
      - name: Build repo
        run: idf.py build

      # Step 3: Install the needed packages for formating
      - name: Set up Clang-format
        run: sudo apt-get install -y clang-format

      # Step 4: Run the formatter
      - name: Run Clang-Format
        run: |
          find . -name "*.cpp" -o -name "*.c" -o -name "*.h" | xargs clang-format -i

      # Step 5: Check for changes
      - name: Check for formatting changes
        run: |
          if [[ $(git status --porcelain) ]]; then
            echo "Code formatting issues found. Please run Clang-Format.";
            exit 1;
          else
            echo "No formatting issues found.";
          fi
        continue-on-error: true # keep going if fails

      # Step 6: Set up static analysis
      - name: Set up clang-tidy with idf
        run: | 
          idf_tools.py install esp-clang
          . ./$IDF_TOOLS_PATH/idf/export.sh

      # Step 7; Performing static analysis
      - name: Perform static analysis
        run: idf.py clang-check
      
      # # Step 2: Set up Docker Buildx
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # # Step 3: Log in to Docker Hub (optional, if you need to push images)
      # # - name: Log in to Docker Hub
      # #   uses: docker/login-action@v1
      # #   with:
      # #     username: ${{ secrets.DOCKER_USERNAME }}
      # #     password: ${{ secrets.DOCKER_PASSWORD }}

      # # Step 4: Build the Docker image
      # - name: Build Docker image
      #   run: docker build -t my-esp-idf-image .

      # # Step 5: Run the Docker container and build the project
      # - name: Run Docker container
      #   run: docker run --rm my-esp-idf-image idf.py build

      # # Step 5.5: Install dependencies for python
      # # - name: Install pytest dependencies
      # #   run: 

      # # # Step 6: (Optional) Run tests
      # # - name: Run tests in Docker container
      # #   run: docker run --rm my-esp-idf-image idf.py test

  # formatting:
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Check out the repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
      
  #     # Step 2: Install the needed packages for formating
  #     - name: Set up Clang-format
  #       run: sudo apt-get install -y clang-format
      
  #     # Step 3: Run the formatter
  #     - name: Run Clang-Format
  #       run: |
  #         find . -name "*.cpp" -o -name "*.c" -o -name "*.h" | xargs clang-format -i

  #     # Step 4: Check for changes
  #     - name: Check for formatting changes
  #       run: |
  #         if [[ $(git status --porcelain) ]]; then
  #           echo "Code formatting issues found. Please run Clang-Format.";
  #           exit 1;
  #         else
  #           echo "No formatting issues found.";
  #         fi
  #       continue-on-error: true # keep going if fails
    
  # static_analysis:
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Step 1: Check out the repository
  #     - name: Checkout repository
  #       uses: actions/checkout@v2
      
  #     # Step 2: Install the needed packages for linting
  #     - name: Set up cpplint
  #       run: sudo apt-get install -y cpplint
      
  #     # Step 3: Run the linter
  #     - name: Run cpp-lint
  #       run: |
  #         find . -name "*.cpp" -o -name "*.c" -o -name "*.h" | xargs cpplint

      # Step 4: Check for changes
      # - name: Check for linter changes
      #   run: |
      #     if [[ $(git status --porcelain) ]]; then
      #       echo "Code formatting issues found. Please run Clang-Format.";
      #       exit 1;
      #     else
      #       echo "No formatting issues found.";
      #     fi
      #   continue-on-error: true # keep going if fails

